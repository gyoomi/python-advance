#!/usr/bin/python3
# -*- coding: utf-8 -*-
# @Author  : Leon
# @Version : 2018/9/18 22:37

# 1.import导入模块
## ①路径搜索顺序
import sys

# print(sys.path)

## ②重新导入模块

# 2.循环导入
## 怎样避免循环导入
## ①程序设计上分层，降低耦合
## ②导入语句放在后面需要导入时再导入，例如放在函数体内导入

# 3.作用域
## ①locals和globals
# def test():
#     a = 100
#     b = 200
#     print(locals())
#
# test()
A = 100
B = 200
# print(globals(), end=",")
# LEGB 规则
## Python 使用 LEGB 的顺序来查找一个符号对应的对象
## locals -> enclosing function -> globals -> builtins

# 4.==、is
## is 是比较两个引用是否指向了同一个对象（引用比较）。
## == 是比较两个对象是否相等

# 5.深拷贝、浅拷贝
## ①浅拷贝是对于一个对象的顶层拷贝。理解：拷贝了引用，并没有拷贝内容
a = [11, 22, 33]
b = a
a.append(44)
# print(a)
# print(b)
## ②深拷贝：深拷贝是对于一个对象所有层次的拷贝(递归)
import copy
a = ["a", "b", "c"]
b = copy.deepcopy(a)
b.append("d")
# print(a)
# print(b)

## ③拷贝的其他方式
### 拷贝的其他方式

# 6.进制和位运算
## 十六进制:0xAF   --->小写的x或者或者大写的X都可以.
## 八进制:0o10     --->第二字母是o，小写的o或者大写的O都可以。
## python2中的八进制：O10   --->第一是字母O,但是,Python3输入的话会有如下的报错：NameError: name 'O10' is not defined
test = 100
# 十进制转其他进制
# print(oct(test))
# print(hex(test))
# print(bin(test))

# 其他进制转十进制
# print(int("0o144", 8))

# 7.位运算
## 注意：所有的位运算都是补码参与运算的。
## 1.&
## 与运算。规则是：二进制下，全为1，则为1，否则为0
## 2.|
## 或运算。规则是：二进制下，只要有一个1，就为1，否则就0
## 3.^
## 异或运算。规则是:二进制下，相同为0，不同为1
## 4.>>
## 右移。
## 规则是：右移运算是将一个二进制位的操作数按指定移动的位数向右移动，移出位被丢弃，左边移出的空位或者一律补0，或者补符号位右移对于无符号类型强制补0，对于有符号类型续补符号位
## 5.<<
## 左移。
## 规则是：左移运算是将一个二进制位的操作数按指定移动的位数向左移位，移出位被丢弃，右边的空位一律补0。
## 6.>>>
## 无符号位移。
## 无符号的移位只有右移，没有左移使用“>>>”进行移位，都补充0

# 8.私有化


# 9.属性property












